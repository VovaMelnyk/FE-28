1) Create code example (todo list)
2) Why use webpack (do not use script order, import-export, modules)
3) Check if node installed
4) Create project structure
5) npm init - create package.json
6) npm i -D webpack webpack-cli - (-D - devDependencies)
7) create webpack.config.js
8) module.exports = {};
9) create entry point - './src/index.js', - file for start
10) create output object - {
        filename: 'bundle.js',
        path: path.resolve(__dirname, 'dist')
    } - final build dir and file
11) run command webpack
11.1) command not found (npm install --global webpack webpack-cli)
12) config mode
13) run webpack
14) eval - function compile string to code
15) add import export to js
16) run webpack
17) add second entry point and show error
18) output pattern name
19) add contenthash to name output
20) run webpack
20.1) many files, and many connect manual
21) Plugins (class for webpack)
22) npm i -D html-webpack-plugin (interact with html)
23) connect html-webpack-plugin to webpack
24) npm i -D clean-webpack-plugin
25) connect clean-webpack-plugin to webpack (clean dist folder)
26) add dev and build scripts to package.json
27) add context to config
28) learn webpack read css files
29) create css and add import to index js
30) test webpack
31) add modules and loaders
32) npm i -D style-loader css-loader
33) add file loader (work with img)
34) npm i -D file-loader
35) img in js example
36) img in css
37) add fonts
38) resolve (show default file extensions)
39) alias
40) add library to project (npm i -S moment) -
41) library optimization -
42) dev server (config)(store all data in RAM) +
43) npm i -D webpack-dev-server +
44) start script (hot reload) +
45) npm i -D copy-webpack-plugin ? -
46) add plugin for separate css (npm i -D mini-css-extract-plugin) -
47) cross-env (npm i -D cross-env) -
48) change scripts (add cross-env) -
49) minify html (minify) -
50) minify css (npm install terser-webpack-plugin optimize-css-assets-webpack-plugin --save-dev) -
51) add babel (npm install --save-dev babel-loader @babel/core) +
52) add presets (npm install --save-dev @babel/preset-env) +
53) npm install --save @babel/polyfill +
54) babel plugin (show static error and fix) (npm install --save-dev @babel/plugin-proposal-class-properties) +
55) eslint (npm i -D eslint-loader babel-eslint eslint) +
56) webpack-analyzer (npm i -D webpack-bundle-analyzer)



sudo npm install -g --unsafe-perm node-sass
sudo npm install -D --unsafe-perm node-sass


