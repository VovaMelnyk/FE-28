Створити простенький калькулятор за допомогою класу.
class Calculator {

}
Цей клас буде мати такі методи:
1) Метод що запитує в користувача 2 числа
2) Метод що додає ці числа
3) Метод що віднімає ці числа
4) Метод що перемножує ці числа
5) Метод що ділить ці числа
6) Метод що виводить результат арефметичної операції на екран в форматі `Результат операції ${value}`
цей метод запускаєтьсяв кінці кожного з методів 2-5
7) Метод що додає в калькулятор новий функціонал (Приймає аргументом колбек в якому описаний новий метод)
8) Метод learn приймає колбеком ф-ю що підносить числа в степінь
Запуски для перевірки:

calculator.start() // ввели числа Наприклад 3 i 2
calculator.plus() // Результат операції 5
calculator.minus() // Результат операції 1
calculator.multiply() // Результат операції 6
calculator.divide() // Результат операції 1.5
calculator.learn(pow) // В калькулятор доданий новий метод
calculator.pow() // Результат операції 9

/////////////////////////////////////////////////////////////////////////////////////////////

Створити класи Library та Book

Клас Library буде описувати нашу бібліотеку книжок. Всі книжки будуть зберігатися в масиві.
Також цей клас буде мати такі методи:
1) Метод buy - це метод що приймає аргументом обєкт книги і додає її в бібліотеку якщо її там ще немає.
Якщо книга вже є показує повідомлення що книга вже куплена
2) Метод sell - це метод що приймає аргументом назву книги і видаляє її з бібліотеки
3) Метод addToFavourite - це метод що приймає аргументом назву книги і додає обєкт книги в список улюблених
4) Метод removeFromFavourite  - це метод що приймає назву книги і видаляє її з списку улюблених
5) Гетер сountFavouriteBooks - це гетер що показує кількість книжок що додані в улюблені
6) Гетер finishedBook - це гетер що містить колекцію всіх прочитаних книжок
7) Метод totalCost - це метод що рахує вартість всіх книжок в бібліотеці

Клас Book буде описувати окрему книгу. Кожна книга це буде обєкт з такими ключами
1) author
2) title
3) price
4) totalPages
5) currentPage

Також цей клас буде мати такі методи:
1) Метод read - це метод що приймає кількість сторінок що було прочитано і міняє значення currentPage
2) Гетер bookProgres - гетер що переводить кількість прочитаних сторінок в відсотки
3) Сетер bookProgres - сетер що переводить відсоток прочитаних сторінок в кількість
Клас Book приймає один аргумент - обєкт з парметрами книги. В середині класу використовувати деструктуризацію обєкта

На остнові написаного коду:
1) Перевірити роботу всіх методів, гетерів, сетерів  написаних класів
2) Після всіх перевірок бібліотека має мати такий вигляд:
2.1) Всього 5 книг
2.2) Дві в улюблених
2.3) Одна прочитана


//////////////////////////


Part 1
Написати клас  Герой в якого будуть параметри (name, life, level, хр, stamina)
name - імя
life - житя =100
level - рівень = 1
хр - досвід = 0
stamina - витривалість = 100
Клас буде мати методи :
1) riseLevel - метод що збідьшує рівень героя на один, якщо хр = 1000
2) addXp - метод що приймає параметром хр і плюсує поки сума небуде 1000. Коли хр стає тисячу метод обнуляє поле до 0.
3) walk - метод що виводить в консоль фразу "name walking"
4) rest - метод що відновлює поле stamina до початкового значення і виводить в консоль фразу 'Recovered' 

Створити героя і викликати для нього метод addXp(50) і addXp(950)
Далі викликати метод riseLevel() що збільшить рівень до 2.
викликати метод walk.

Part 2 
Написати класи Людина, Гном, Маг які будуть насладувати все від класа Герой.
Ці 3 класа будуть мати додаткову властивість race - раса.
Людина додатково матиме поле - strength = 100
Гном матиме додатково поле - rage = 100
Маг матиме додаткове поле - mana = 100

Для людини додати метод - wardenFight - який при кожному запуску зменьшує поле stamina на 20.
Коли поле stamina стане 0 потрібно викликати метод rest() щоб відновити її значення.

Для гнома додати метод berserk'sFury - який при кожному виклику збільшує поле 
rage на 30. Якщо rage = 100 обнулити поле stamina і rage та викликати метод rest().

Для мага додати метод spell який при виклику зменьшує занчення на 25 і stamina на 25.
Коли значення stamina стає 0 потрібно викликати метод rest(). 
Додати метод reload() який оновлює поле mana до 100

Створити по одному екземпляру кожного класу для кожного з них обнулити показник stamina викликом їхніх спеціальних методів, щоб в консолі зявилося повідомлення 'Recovered' 

Part 3 

Створити клас FireMage який наслідує всі властивості від Мага і має додаткову властивість skill
skill - поле де додається навик 'fireball'
Додати метод shootFireBall - який виведе в консоль фразу "Вогняний шар запущений і нанесен шкоди на ${рандомне число від 1 до 30}" і запустить метод spell();

Створити екземпляр класу FireMage і запустити 4 рази метод shootFireBall(). після цього в консолі має зявитися напис 'Recovered'.